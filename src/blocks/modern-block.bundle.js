/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/blocks/modern-block.js":
/*!************************************!*\
  !*** ./src/blocks/modern-block.js ***!
  \************************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$blockEditor = wp.blockEditor,\n  InspectorControls = _wp$blockEditor.InspectorControls,\n  MediaUpload = _wp$blockEditor.MediaUpload,\n  RichText = _wp$blockEditor.RichText,\n  ColorPalette = _wp$blockEditor.ColorPalette,\n  BlockControls = _wp$blockEditor.BlockControls,\n  AlignmentToolbar = _wp$blockEditor.AlignmentToolbar;\nvar _wp$components = wp.components,\n  PanelBody = _wp$components.PanelBody,\n  Button = _wp$components.Button;\nvar __ = wp.i18n.__;\n\n// Constants for reusable styles\nvar BUTTON_STYLES = {\n  padding: '10px 20px',\n  borderRadius: '5px',\n  display: 'inline-block',\n  marginTop: '10px',\n  textDecoration: 'none',\n  transition: 'background-color 0.3s, color 0.3s'\n};\nregisterBlockType('custom/modern-block', {\n  title: __('Modern Block', 'custom-blocks'),\n  icon: 'star-filled',\n  category: 'design',\n  attributes: {\n    text: {\n      type: 'string',\n      source: 'html',\n      selector: 'h2'\n    },\n    image: {\n      type: 'string',\n      \"default\": null\n    },\n    buttonLabel: {\n      type: 'string',\n      \"default\": __('Click Me', 'custom-blocks')\n    },\n    buttonLink: {\n      type: 'string',\n      \"default\": '#'\n    },\n    bgColor: {\n      type: 'string',\n      \"default\": '#ffffff'\n    },\n    textColor: {\n      type: 'string',\n      \"default\": '#000000'\n    },\n    buttonTextColor: {\n      type: 'string',\n      \"default\": '#ffffff'\n    },\n    // Новий атрибут для кольору тексту кнопки\n    titleTextColor: {\n      type: 'string',\n      \"default\": '#000000'\n    },\n    // Новий атрибут для кольору тексту заголовка (тайтла)\n    alignment: {\n      type: 'string',\n      \"default\": 'center'\n    }\n  },\n  edit: function edit(_ref) {\n    var attributes = _ref.attributes,\n      setAttributes = _ref.setAttributes;\n    var text = attributes.text,\n      image = attributes.image,\n      buttonLabel = attributes.buttonLabel,\n      buttonLink = attributes.buttonLink,\n      bgColor = attributes.bgColor,\n      textColor = attributes.textColor,\n      buttonTextColor = attributes.buttonTextColor,\n      titleTextColor = attributes.titleTextColor,\n      alignment = attributes.alignment;\n    var renderColorPalette = function renderColorPalette(label, valueKey) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, label), /*#__PURE__*/React.createElement(ColorPalette, {\n        value: attributes[valueKey],\n        onChange: function onChange(value) {\n          if (value) {\n            setAttributes(_defineProperty({}, valueKey, value));\n          }\n        }\n      }));\n    };\n    var renderButton = function renderButton(label, link) {\n      return /*#__PURE__*/React.createElement(\"a\", {\n        href: link,\n        className: \"modern-block-button\",\n        style: _objectSpread(_objectSpread({}, BUTTON_STYLES), {}, {\n          backgroundColor: textColor,\n          color: buttonTextColor,\n          // Додаємо окремий колір тексту для кнопки\n          filter: 'contrast(1.5)'\n        })\n      }, label);\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InspectorControls, null, /*#__PURE__*/React.createElement(PanelBody, {\n      title: __('Block Settings', 'custom-blocks')\n    }, renderColorPalette(__('Background Color', 'custom-blocks'), 'bgColor'), renderColorPalette(__('Text Color (Button Background)', 'custom-blocks'), 'textColor'), renderColorPalette(__('Button Text Color', 'custom-blocks'), 'buttonTextColor'), renderColorPalette(__('Title Text Color', 'custom-blocks'), 'titleTextColor'))), /*#__PURE__*/React.createElement(BlockControls, null, /*#__PURE__*/React.createElement(AlignmentToolbar, {\n      value: alignment,\n      onChange: function onChange(align) {\n        return setAttributes({\n          alignment: align\n        });\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modern-block block-has-content\",\n      \"aria-live\": \"polite\",\n      style: {\n        backgroundColor: bgColor,\n        color: textColor,\n        textAlign: alignment\n      }\n    }, /*#__PURE__*/React.createElement(MediaUpload, {\n      onSelect: function onSelect(media) {\n        return media.url && setAttributes({\n          image: media.url\n        });\n      },\n      allowedTypes: ['image'],\n      render: function render(_ref2) {\n        var open = _ref2.open;\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n          onClick: open,\n          className: \"block-editor-rich-text__editable wp-block-button__link wp-element-button rich-text \".concat(image ? 'image-button' : 'button button-large')\n        }, image ? __(\"\".concat(image.title, \" Uploaded\"), 'custom-blocks') : __('Upload Image', 'custom-blocks')), image && /*#__PURE__*/React.createElement(\"div\", {\n          className: \"cm-image\"\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: image,\n          alt: image ? __('Uploaded Image', 'custom-blocks') : __('No Image', 'custom-blocks')\n        })));\n      }\n    }), /*#__PURE__*/React.createElement(RichText, {\n      tagName: \"h2\",\n      \"aria-label\": __('Editable Block Title', 'custom-blocks'),\n      placeholder: __('Add your text...', 'custom-blocks'),\n      value: text,\n      onChange: function onChange(value) {\n        return setAttributes({\n          text: value\n        });\n      },\n      style: {\n        color: titleTextColor\n      } // Додаємо стиль для кольору тексту заголовка\n    }), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"button-text\"\n    }, __('Button Text:', 'custom-blocks')), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"button-text\",\n      type: \"text\",\n      value: buttonLabel,\n      placeholder: __('Button Text...', 'custom-blocks'),\n      onChange: function onChange(e) {\n        return setAttributes({\n          buttonLabel: e.target.value\n        });\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"button-link\"\n    }, __('Button Link:', 'custom-blocks')), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"button-link\",\n      type: \"url\",\n      value: buttonLink,\n      placeholder: __('Button Link...', 'custom-blocks'),\n      onChange: function onChange(e) {\n        return setAttributes({\n          buttonLink: e.target.value\n        });\n      }\n    })), renderButton(buttonLabel, buttonLink)));\n  },\n  save: function save(_ref3) {\n    var attributes = _ref3.attributes;\n    var text = attributes.text,\n      image = attributes.image,\n      buttonLabel = attributes.buttonLabel,\n      buttonLink = attributes.buttonLink,\n      bgColor = attributes.bgColor,\n      textColor = attributes.textColor,\n      buttonTextColor = attributes.buttonTextColor,\n      titleTextColor = attributes.titleTextColor,\n      alignment = attributes.alignment;\n    var renderSavedButton = function renderSavedButton() {\n      return /*#__PURE__*/React.createElement(\"a\", {\n        href: /^https?:\\/\\//.test(buttonLink) ? buttonLink : '#',\n        style: _objectSpread(_objectSpread({}, BUTTON_STYLES), {}, {\n          backgroundColor: textColor,\n          color: buttonTextColor // Додаємо колір тексту кнопки\n        })\n      }, buttonLabel);\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modern-block\",\n      style: {\n        backgroundColor: bgColor,\n        color: textColor,\n        textAlign: alignment\n      }\n    }, image && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cm-image\"\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: image,\n      alt: __('Block Image', 'custom-blocks')\n    })), text ? /*#__PURE__*/React.createElement(RichText.Content, {\n      tagName: \"h2\",\n      value: text,\n      style: {\n        color: titleTextColor\n      } // Зберігаємо стиль заголовка\n    }) : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"richtext-placeholder\",\n      \"aria-hidden\": \"true\",\n      style: {\n        color: titleTextColor\n      }\n    }, __('Empty Block Title', 'custom-blocks')), renderSavedButton());\n  }\n});\n\n//# sourceURL=webpack:///./src/blocks/modern-block.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/blocks/modern-block.js"]();
/******/ 	
/******/ })()
;